// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Role {
  id    String @id @default(uuid())
  name  String
  users User[]
}

model ProductCategory {
  id       String    @id @default(uuid())
  name     String
  products Product[]
}

model Product {
  id           String            @id @default(uuid())
  name         String
  description  String
  imagePath    String
  category     ProductCategory[]
  categoryName String
  price        Float?
  quantity     Int
  status       String
  notes        String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  sales        Sale[]
}

model User {
  id        String   @id @default(uuid())
  name      String
  phone     String
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    String
  activated Boolean  @default(false)
  avatarSrc String?
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Installer {
  id        String   @id @default(uuid())
  name      String
  phone     String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  jobs      Job[]
}

model Agent {
  id        String   @id @default(uuid())
  name      String
  phone     String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sales     Sale[]
  jobs      Job[]
}

model Client {
  id        String   @id @default(uuid())
  name      String
  phone     String
  email     String
  address   String
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sales     Sale[]
  jobs      Job[]
}

model Sale {
  id           String    @id @default(uuid())
  status       String
  client       Client    @relation(fields: [clientId], references: [id])
  clientId     String
  agent        Agent     @relation(fields: [agentId], references: [id])
  agentId      String
  productsSold Product[]
  totalPrice   Float
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Job {
  id               String    @id @default(uuid())
  client           Client    @relation(fields: [clientId], references: [id])
  clientId         String
  agent            Agent     @relation(fields: [agentId], references: [id])
  agentId          String
  installer        Installer @relation(fields: [installerId], references: [id])
  installerId      String
  jobType          String
  description      String
  location         String
  jobDate          DateTime
  assignee         String
  status           String
  remainingBalance Float
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model ToDo {
  id          String   @id @default(uuid())
  title       String   @unique
  description String
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FamilyMember {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

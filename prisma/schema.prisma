// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model ProductCategory {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model ProductStatus {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model Product {
  id                Int             @id @default(autoincrement())
  name              String          @unique
  description       String?
  imagePath         String?
  category          ProductCategory @relation(fields: [productCategoryId], references: [id])
  productCategoryId Int
  price             Float
  quantity          Int
  status            ProductStatus   @relation(fields: [productStatusId], references: [id])
  productStatusId   Int
  notes             String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model UserRole {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  phone     String
  role      UserRole @relation(fields: [roleId], references: [id])
  roleId    Int
  activated Boolean  @default(true)
  avatarSrc String?
  email     String   @unique
  password  String
  sales     Sale[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  phone     String
  email     String
  address   String
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sales     Sale[]
  Job       Job[]
}

//TODO refactor: add SoldProduct model and dependencies
model Sale {
  id           Int      @id @default(autoincrement())
  status       String
  customer     Customer @relation(fields: [customerId], references: [id])
  customerId   Int
  agent        User?    @relation(fields: [agentId], references: [id])
  agentId      Int?
  soldProducts String
  totalPrice   Float
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Job {
  id               Int      @id @default(autoincrement())
  customer         Customer @relation(fields: [customerId], references: [id])
  customerId       Int
  installerId      Int?
  jobType          String
  description      String
  location         String
  jobDate          DateTime
  assignee         String
  status           String
  remainingBalance Float?
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

/////////////////////////////////////
model ToDo {
  id          String   @id @default(uuid())
  title       String
  description String
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
